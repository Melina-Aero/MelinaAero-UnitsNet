//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToMolarMass
{
    public static class NumberToMolarMassExtensions
    {
        #region CentigramPerMole

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass CentigramsPerMole<T>(this T value) => MolarMass.FromCentigramsPerMole(Convert.ToDouble(value));

        #endregion

        #region DecagramPerMole

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass DecagramsPerMole<T>(this T value) => MolarMass.FromDecagramsPerMole(Convert.ToDouble(value));

        #endregion

        #region DecigramPerMole

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass DecigramsPerMole<T>(this T value) => MolarMass.FromDecigramsPerMole(Convert.ToDouble(value));

        #endregion

        #region GramPerMole

        /// <inheritdoc cref="MolarMass.FromGramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass GramsPerMole<T>(this T value) => MolarMass.FromGramsPerMole(Convert.ToDouble(value));

        #endregion

        #region HectogramPerMole

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass HectogramsPerMole<T>(this T value) => MolarMass.FromHectogramsPerMole(Convert.ToDouble(value));

        #endregion

        #region KilogramPerMole

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass KilogramsPerMole<T>(this T value) => MolarMass.FromKilogramsPerMole(Convert.ToDouble(value));

        #endregion

        #region KilopoundPerMole

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass KilopoundsPerMole<T>(this T value) => MolarMass.FromKilopoundsPerMole(Convert.ToDouble(value));

        #endregion

        #region MegapoundPerMole

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass MegapoundsPerMole<T>(this T value) => MolarMass.FromMegapoundsPerMole(Convert.ToDouble(value));

        #endregion

        #region MicrogramPerMole

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass MicrogramsPerMole<T>(this T value) => MolarMass.FromMicrogramsPerMole(Convert.ToDouble(value));

        #endregion

        #region MilligramPerMole

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass MilligramsPerMole<T>(this T value) => MolarMass.FromMilligramsPerMole(Convert.ToDouble(value));

        #endregion

        #region NanogramPerMole

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass NanogramsPerMole<T>(this T value) => MolarMass.FromNanogramsPerMole(Convert.ToDouble(value));

        #endregion

        #region PoundPerMole

        /// <inheritdoc cref="MolarMass.FromPoundsPerMole(UnitsNet.QuantityValue)" />
        public static MolarMass PoundsPerMole<T>(this T value) => MolarMass.FromPoundsPerMole(Convert.ToDouble(value));

        #endregion

    }
}
#endif
