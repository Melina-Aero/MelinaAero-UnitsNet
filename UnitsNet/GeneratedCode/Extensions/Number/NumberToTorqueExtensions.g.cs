//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToTorque
{
    public static class NumberToTorqueExtensions
    {
        #region KilogramForceCentimeter

        /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(UnitsNet.QuantityValue)" />
        public static Torque KilogramForceCentimeters<T>(this T value) => Torque.FromKilogramForceCentimeters(Convert.ToDouble(value));

        #endregion

        #region KilogramForceMeter

        /// <inheritdoc cref="Torque.FromKilogramForceMeters(UnitsNet.QuantityValue)" />
        public static Torque KilogramForceMeters<T>(this T value) => Torque.FromKilogramForceMeters(Convert.ToDouble(value));

        #endregion

        #region KilogramForceMillimeter

        /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(UnitsNet.QuantityValue)" />
        public static Torque KilogramForceMillimeters<T>(this T value) => Torque.FromKilogramForceMillimeters(Convert.ToDouble(value));

        #endregion

        #region KilonewtonCentimeter

        /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(UnitsNet.QuantityValue)" />
        public static Torque KilonewtonCentimeters<T>(this T value) => Torque.FromKilonewtonCentimeters(Convert.ToDouble(value));

        #endregion

        #region KilonewtonMeter

        /// <inheritdoc cref="Torque.FromKilonewtonMeters(UnitsNet.QuantityValue)" />
        public static Torque KilonewtonMeters<T>(this T value) => Torque.FromKilonewtonMeters(Convert.ToDouble(value));

        #endregion

        #region KilonewtonMillimeter

        /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(UnitsNet.QuantityValue)" />
        public static Torque KilonewtonMillimeters<T>(this T value) => Torque.FromKilonewtonMillimeters(Convert.ToDouble(value));

        #endregion

        #region KilopoundForceFoot

        /// <inheritdoc cref="Torque.FromKilopoundForceFeet(UnitsNet.QuantityValue)" />
        public static Torque KilopoundForceFeet<T>(this T value) => Torque.FromKilopoundForceFeet(Convert.ToDouble(value));

        #endregion

        #region KilopoundForceInch

        /// <inheritdoc cref="Torque.FromKilopoundForceInches(UnitsNet.QuantityValue)" />
        public static Torque KilopoundForceInches<T>(this T value) => Torque.FromKilopoundForceInches(Convert.ToDouble(value));

        #endregion

        #region MeganewtonCentimeter

        /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(UnitsNet.QuantityValue)" />
        public static Torque MeganewtonCentimeters<T>(this T value) => Torque.FromMeganewtonCentimeters(Convert.ToDouble(value));

        #endregion

        #region MeganewtonMeter

        /// <inheritdoc cref="Torque.FromMeganewtonMeters(UnitsNet.QuantityValue)" />
        public static Torque MeganewtonMeters<T>(this T value) => Torque.FromMeganewtonMeters(Convert.ToDouble(value));

        #endregion

        #region MeganewtonMillimeter

        /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(UnitsNet.QuantityValue)" />
        public static Torque MeganewtonMillimeters<T>(this T value) => Torque.FromMeganewtonMillimeters(Convert.ToDouble(value));

        #endregion

        #region MegapoundForceFoot

        /// <inheritdoc cref="Torque.FromMegapoundForceFeet(UnitsNet.QuantityValue)" />
        public static Torque MegapoundForceFeet<T>(this T value) => Torque.FromMegapoundForceFeet(Convert.ToDouble(value));

        #endregion

        #region MegapoundForceInch

        /// <inheritdoc cref="Torque.FromMegapoundForceInches(UnitsNet.QuantityValue)" />
        public static Torque MegapoundForceInches<T>(this T value) => Torque.FromMegapoundForceInches(Convert.ToDouble(value));

        #endregion

        #region NewtonCentimeter

        /// <inheritdoc cref="Torque.FromNewtonCentimeters(UnitsNet.QuantityValue)" />
        public static Torque NewtonCentimeters<T>(this T value) => Torque.FromNewtonCentimeters(Convert.ToDouble(value));

        #endregion

        #region NewtonMeter

        /// <inheritdoc cref="Torque.FromNewtonMeters(UnitsNet.QuantityValue)" />
        public static Torque NewtonMeters<T>(this T value) => Torque.FromNewtonMeters(Convert.ToDouble(value));

        #endregion

        #region NewtonMillimeter

        /// <inheritdoc cref="Torque.FromNewtonMillimeters(UnitsNet.QuantityValue)" />
        public static Torque NewtonMillimeters<T>(this T value) => Torque.FromNewtonMillimeters(Convert.ToDouble(value));

        #endregion

        #region PoundForceFoot

        /// <inheritdoc cref="Torque.FromPoundForceFeet(UnitsNet.QuantityValue)" />
        public static Torque PoundForceFeet<T>(this T value) => Torque.FromPoundForceFeet(Convert.ToDouble(value));

        #endregion

        #region PoundForceInch

        /// <inheritdoc cref="Torque.FromPoundForceInches(UnitsNet.QuantityValue)" />
        public static Torque PoundForceInches<T>(this T value) => Torque.FromPoundForceInches(Convert.ToDouble(value));

        #endregion

        #region TonneForceCentimeter

        /// <inheritdoc cref="Torque.FromTonneForceCentimeters(UnitsNet.QuantityValue)" />
        public static Torque TonneForceCentimeters<T>(this T value) => Torque.FromTonneForceCentimeters(Convert.ToDouble(value));

        #endregion

        #region TonneForceMeter

        /// <inheritdoc cref="Torque.FromTonneForceMeters(UnitsNet.QuantityValue)" />
        public static Torque TonneForceMeters<T>(this T value) => Torque.FromTonneForceMeters(Convert.ToDouble(value));

        #endregion

        #region TonneForceMillimeter

        /// <inheritdoc cref="Torque.FromTonneForceMillimeters(UnitsNet.QuantityValue)" />
        public static Torque TonneForceMillimeters<T>(this T value) => Torque.FromTonneForceMillimeters(Convert.ToDouble(value));

        #endregion

    }
}
#endif
