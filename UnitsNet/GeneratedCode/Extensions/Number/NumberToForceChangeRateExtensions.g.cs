//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToForceChangeRate
{
    public static class NumberToForceChangeRateExtensions
    {
        #region CentinewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate CentinewtonsPerSecond<T>(this T value) => ForceChangeRate.FromCentinewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region DecanewtonPerMinute

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(UnitsNet.QuantityValue)" />
        public static ForceChangeRate DecanewtonsPerMinute<T>(this T value) => ForceChangeRate.FromDecanewtonsPerMinute(Convert.ToDouble(value));

        #endregion

        #region DecanewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate DecanewtonsPerSecond<T>(this T value) => ForceChangeRate.FromDecanewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region DecinewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate DecinewtonsPerSecond<T>(this T value) => ForceChangeRate.FromDecinewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region KilonewtonPerMinute

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(UnitsNet.QuantityValue)" />
        public static ForceChangeRate KilonewtonsPerMinute<T>(this T value) => ForceChangeRate.FromKilonewtonsPerMinute(Convert.ToDouble(value));

        #endregion

        #region KilonewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate KilonewtonsPerSecond<T>(this T value) => ForceChangeRate.FromKilonewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region MicronewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate MicronewtonsPerSecond<T>(this T value) => ForceChangeRate.FromMicronewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region MillinewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate MillinewtonsPerSecond<T>(this T value) => ForceChangeRate.FromMillinewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region NanonewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate NanonewtonsPerSecond<T>(this T value) => ForceChangeRate.FromNanonewtonsPerSecond(Convert.ToDouble(value));

        #endregion

        #region NewtonPerMinute

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(UnitsNet.QuantityValue)" />
        public static ForceChangeRate NewtonsPerMinute<T>(this T value) => ForceChangeRate.FromNewtonsPerMinute(Convert.ToDouble(value));

        #endregion

        #region NewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(UnitsNet.QuantityValue)" />
        public static ForceChangeRate NewtonsPerSecond<T>(this T value) => ForceChangeRate.FromNewtonsPerSecond(Convert.ToDouble(value));

        #endregion

    }
}
#endif
