//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToBitRate
{
    public static class NumberToBitRateExtensions
    {
        #region BitPerSecond

        /// <inheritdoc cref="BitRate.FromBitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate BitsPerSecond<T>(this T value) => BitRate.FromBitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region BytePerSecond

        /// <inheritdoc cref="BitRate.FromBytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate BytesPerSecond<T>(this T value) => BitRate.FromBytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region ExabitPerSecond

        /// <inheritdoc cref="BitRate.FromExabitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate ExabitsPerSecond<T>(this T value) => BitRate.FromExabitsPerSecond(Convert.ToDouble(value));


        #endregion

        #region ExabytePerSecond

        /// <inheritdoc cref="BitRate.FromExabytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate ExabytesPerSecond<T>(this T value) => BitRate.FromExabytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region ExbibitPerSecond

        /// <inheritdoc cref="BitRate.FromExbibitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate ExbibitsPerSecond<T>(this T value) => BitRate.FromExbibitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region ExbibytePerSecond

        /// <inheritdoc cref="BitRate.FromExbibytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate ExbibytesPerSecond<T>(this T value) => BitRate.FromExbibytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region GibibitPerSecond

        /// <inheritdoc cref="BitRate.FromGibibitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate GibibitsPerSecond<T>(this T value) => BitRate.FromGibibitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region GibibytePerSecond

        /// <inheritdoc cref="BitRate.FromGibibytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate GibibytesPerSecond<T>(this T value) => BitRate.FromGibibytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region GigabitPerSecond

        /// <inheritdoc cref="BitRate.FromGigabitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate GigabitsPerSecond<T>(this T value) => BitRate.FromGigabitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region GigabytePerSecond

        /// <inheritdoc cref="BitRate.FromGigabytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate GigabytesPerSecond<T>(this T value) => BitRate.FromGigabytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region KibibitPerSecond

        /// <inheritdoc cref="BitRate.FromKibibitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate KibibitsPerSecond<T>(this T value) => BitRate.FromKibibitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region KibibytePerSecond

        /// <inheritdoc cref="BitRate.FromKibibytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate KibibytesPerSecond<T>(this T value) => BitRate.FromKibibytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region KilobitPerSecond

        /// <inheritdoc cref="BitRate.FromKilobitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate KilobitsPerSecond<T>(this T value) => BitRate.FromKilobitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region KilobytePerSecond

        /// <inheritdoc cref="BitRate.FromKilobytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate KilobytesPerSecond<T>(this T value) => BitRate.FromKilobytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region MebibitPerSecond

        /// <inheritdoc cref="BitRate.FromMebibitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate MebibitsPerSecond<T>(this T value) => BitRate.FromMebibitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region MebibytePerSecond

        /// <inheritdoc cref="BitRate.FromMebibytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate MebibytesPerSecond<T>(this T value) => BitRate.FromMebibytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region MegabitPerSecond

        /// <inheritdoc cref="BitRate.FromMegabitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate MegabitsPerSecond<T>(this T value) => BitRate.FromMegabitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region MegabytePerSecond

        /// <inheritdoc cref="BitRate.FromMegabytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate MegabytesPerSecond<T>(this T value) => BitRate.FromMegabytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region PebibitPerSecond

        /// <inheritdoc cref="BitRate.FromPebibitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate PebibitsPerSecond<T>(this T value) => BitRate.FromPebibitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region PebibytePerSecond

        /// <inheritdoc cref="BitRate.FromPebibytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate PebibytesPerSecond<T>(this T value) => BitRate.FromPebibytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region PetabitPerSecond

        /// <inheritdoc cref="BitRate.FromPetabitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate PetabitsPerSecond<T>(this T value) => BitRate.FromPetabitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region PetabytePerSecond

        /// <inheritdoc cref="BitRate.FromPetabytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate PetabytesPerSecond<T>(this T value) => BitRate.FromPetabytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region TebibitPerSecond

        /// <inheritdoc cref="BitRate.FromTebibitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate TebibitsPerSecond<T>(this T value) => BitRate.FromTebibitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region TebibytePerSecond

        /// <inheritdoc cref="BitRate.FromTebibytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate TebibytesPerSecond<T>(this T value) => BitRate.FromTebibytesPerSecond(Convert.ToDouble(value));

        #endregion

        #region TerabitPerSecond

        /// <inheritdoc cref="BitRate.FromTerabitsPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate TerabitsPerSecond<T>(this T value) => BitRate.FromTerabitsPerSecond(Convert.ToDouble(value));

        #endregion

        #region TerabytePerSecond

        /// <inheritdoc cref="BitRate.FromTerabytesPerSecond(UnitsNet.QuantityValue)" />
        public static BitRate TerabytesPerSecond<T>(this T value) => BitRate.FromTerabytesPerSecond(Convert.ToDouble(value));

        #endregion

    }
}
#endif
